/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.gawk.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.mde.gawk.gawk.GawkProgram
import uk.ac.kcl.mde.gawk.gawk.SectionHeader
import uk.ac.kcl.mde.gawk.gawk.Statement
import uk.ac.kcl.mde.gawk.gawk.MatchStatement
import uk.ac.kcl.mde.gawk.gawk.VariableDeclaration
import uk.ac.kcl.mde.gawk.gawk.PrintStatement
import org.eclipse.emf.common.util.EList
import uk.ac.kcl.mde.gawk.gawk.PrintOptions
import uk.ac.kcl.mde.gawk.gawk.StringOption
import uk.ac.kcl.mde.gawk.gawk.ColOption
import uk.ac.kcl.mde.gawk.gawk.VarReference
import uk.ac.kcl.mde.gawk.gawk.MatchDeclaration
import uk.ac.kcl.mde.gawk.gawk.IntOption
import uk.ac.kcl.mde.gawk.gawk.VariableOptions

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class GawkGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as GawkProgram
		
		fsa.generateFile('program.txt', model.doGenerateProgram)
	}
	
	def String doGenerateProgram(GawkProgram program) '''
		//YOUR AWK PROGRAM
		'BEGIN {«program.sections.filter[sectionBlock | sectionBlock.section == SectionHeader.START].map[start | start.statements.generateAwkCommandsForSection].join(' ')»}'
	'''
	
	def generateAwkCommandsForSection(EList<Statement> stmts) {
		'''«stmts.map[generateAwkCommand].join(' ')»'''
	}
	
	dispatch def generateAwkCommand(Statement stmt) ''''''
	dispatch def generateAwkCommand(MatchStatement stmt) '''/«stmt.exp.generateAwkMatchExp»/'''
	dispatch def generateAwkCommand(VariableDeclaration stmt) '''«stmt.name» = «stmt.^val.generateAwkVariableOptions»;'''
	dispatch def generateAwkCommand(PrintStatement stmt) '''{print «stmt.options.map[generateAwkPrintOption].join(' ')»}'''
	
	dispatch def generateAwkPrintOption(PrintOptions opt) ''''''
	dispatch def generateAwkPrintOption(StringOption opt) '''"«opt.^val»"'''
	dispatch def generateAwkPrintOption(ColOption opt) '''«opt.^val»'''
	dispatch def generateAwkPrintOption(VarReference opt) '''«opt.^val.generateAwkVarDeclaration»'''
	
	def generateAwkVarDeclaration(VariableDeclaration opt) '''«opt.name»'''
	
	dispatch def generateAwkMatchExp(MatchDeclaration decl) ''''''
	dispatch def generateAwkMatchExp(StringOption decl) '''"«decl.^val»"'''
	dispatch def generateAwkMatchExp(VarReference decl) '''«decl.^val.generateAwkVarDeclaration»'''
	
	dispatch def generateAwkVariableOptions(VariableOptions decl) ''''''
	dispatch def generateAwkVariableOptions(StringOption decl) '''"«decl.^val»"'''
	dispatch def generateAwkVariableOptions(IntOption decl) '''«decl.^val»'''

}
