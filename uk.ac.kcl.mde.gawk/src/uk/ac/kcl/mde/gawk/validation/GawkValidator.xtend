/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.gawk.validation

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.mde.gawk.gawk.GawkPackage
import uk.ac.kcl.mde.gawk.gawk.GawkProgram
import uk.ac.kcl.mde.gawk.gawk.SectionHeader
import uk.ac.kcl.mde.gawk.gawk.Section
import uk.ac.kcl.mde.gawk.gawk.MatchStatement
import uk.ac.kcl.mde.gawk.gawk.impl.MatchStatementImpl

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GawkValidator extends AbstractGawkValidator { 

	public static val INVALID_SECTION = 'invalid_section'
	public static val INVALID_MATCH_PRINT_STATEMENT = 'invalid_match_print_statement'
	
	 @Check
	 def checkSectionHeaderNotDuplicate(GawkProgram program) {
		if (program.sections.filter[sectionBlock | sectionBlock.section == SectionHeader.START].size > 1) {
			warning('There should not be two start headers', program,
				GawkPackage.Literals.GAWK_PROGRAM__SECTIONS, INVALID_SECTION)
			
		}
		if (program.sections.filter[sectionBlock | sectionBlock.section == SectionHeader.END].size > 1) {
			warning('There should not be two end headers', program,
				GawkPackage.Literals.GAWK_PROGRAM__SECTIONS, INVALID_SECTION)
		}
		if (program.sections.filter[sectionBlock | sectionBlock.section == SectionHeader.BODY].size > 1) {
			warning('There should not be two body headers', program,
				GawkPackage.Literals.GAWK_PROGRAM__SECTIONS, INVALID_SECTION)
		}
		
	}
	
	@Check
	 def checkPrintAfterMatchStatement(Section section) {
	 	for(i : 0 ..< (section.statements.size-1)){
	 		if ((section.statements.get(i).eClass.name == "MatchStatement") && (section.statements.get(i + 1).eClass.name !== "PrintStatement")) {
			warning('There should be a print statement after a match statement', section,
				GawkPackage.Literals.SECTION__STATEMENTS, INVALID_MATCH_PRINT_STATEMENT)
			}
 		}
	}
	
}
