/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.mde.awk.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.mde.awk.awk.AwkProgram
import uk.ac.kcl.mde.awk.awk.SectionHeader
import uk.ac.kcl.mde.awk.awk.Statement
import uk.ac.kcl.mde.awk.awk.MatchStatement
import uk.ac.kcl.mde.awk.awk.VariableDeclaration
import uk.ac.kcl.mde.awk.awk.PrintStatement
import org.eclipse.emf.common.util.EList
import uk.ac.kcl.mde.awk.awk.StringOption
import uk.ac.kcl.mde.awk.awk.ColOption
import uk.ac.kcl.mde.awk.awk.VarReference
import uk.ac.kcl.mde.awk.awk.MatchDeclaration
import uk.ac.kcl.mde.awk.awk.IntOption
import uk.ac.kcl.mde.awk.awk.VariableOptions
import uk.ac.kcl.mde.awk.awk.Section
import uk.ac.kcl.mde.awk.awk.Addition
import uk.ac.kcl.mde.awk.awk.Expression
import uk.ac.kcl.mde.awk.awk.Multiplication
import uk.ac.kcl.mde.awk.awk.PrintColumns
import uk.ac.kcl.mde.awk.awk.ColStatement
import uk.ac.kcl.mde.awk.awk.RowStatement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class AwkGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as AwkProgram
		
		fsa.generateFile('program.txt', model.doGenerateProgram)
	}
	
	def String doGenerateProgram(AwkProgram program) '''
		awk '«program.sections.generateSections(SectionHeader.START)»«program.sections.generateSections(SectionHeader.BODY)»«program.sections.generateSections(SectionHeader.END)»' «program.filename.file.generateAwkMatchExp»
	'''
	
	def generateSections(EList<Section> sections, SectionHeader headerType) {
		val sectionIterable = sections.filter[sectionBlock | sectionBlock.section == headerType]
		sectionIterable.map[section | 
			if (section.statements.length > 0) {
				if (headerType == SectionHeader.START) {
					'''BEGIN {«section.statements.generateAwkCommandsForSection»}'''	
				} else if (headerType == SectionHeader.BODY) {
					'''«section.statements.generateAwkCommandsForSection»'''
				} else {
					'''END {«section.statements.generateAwkCommandsForSection»}'''
				}
			}
		].join(' ')
	}
	
	def generateAwkCommandsForSection(EList<Statement> stmts) {
		'''«stmts.map[generateAwkCommand].join(' ')»'''
	}
	
	dispatch def generateAwkCommand(Statement stmt) ''''''
	dispatch def generateAwkCommand(MatchStatement stmt) '''/«stmt.exp.generateAwkMatchExp»/'''
	dispatch def generateAwkCommand(PrintStatement stmt) '''{print «stmt.option.generateAwkPrintColumns»}'''
	dispatch def generateAwkCommand(RowStatement stmt) '''{print «stmt.statements.map[generateAwkColStatement].join(' ')»}'''
	
	dispatch def generateAwkMatchExp(MatchDeclaration decl) ''''''
	dispatch def generateAwkMatchExp(StringOption decl) '''«decl.^val»'''
	dispatch def generateAwkMatchExp(VarReference decl) '''«decl.^val.generateAwkMatchVarDeclaration»'''
	
	dispatch def generateAwkVariableOptions(VariableOptions decl) ''''''
	dispatch def generateAwkVariableOptions(StringOption decl) '''"«decl.^val»"'''
	dispatch def generateAwkVariableOptions(IntOption decl) '''«decl.^val»'''
	
	dispatch def generateAwkMatchVariableOptions(VariableOptions decl) ''''''
	dispatch def generateAwkMatchVariableOptions(StringOption decl) '''«decl.^val»'''
	dispatch def generateAwkMatchVariableOptions(IntOption decl) '''«decl.^val»'''
	
	def generateAwkVarDeclaration(VariableDeclaration opt) '''«opt.^val.generateAwkVariableOptions»'''
	
	def generateAwkMatchVarDeclaration(VariableDeclaration opt) '''«opt.^val.generateAwkMatchVariableOptions»'''
	
	def generateAwkColStatement(ColStatement stmt) '''«stmt.col.generateAwkPrintColumns» "«stmt.divider»"'''
	
	dispatch def generateAwkPrintColumns(PrintColumns exp) ''''''
	dispatch def generateAwkPrintColumns(StringOption exp) '''"«exp.^val»"'''
	dispatch def generateAwkPrintColumns(IntOption exp) '''«exp.^val»'''
	dispatch def generateAwkPrintColumns(ColOption exp) '''$«exp.^val.columnIndex»'''
	dispatch def generateAwkPrintColumns(VarReference exp) '''«exp.^val.generateAwkVarDeclaration»'''
	
	dispatch def generateAwkExpression(Expression exp) ''''''
	dispatch def String generateAwkExpression(Addition exp) '''
		(«exp.left.generateAwkExpression»«FOR idx: (0..exp.operator.size-1)» «exp.operator.get(idx)» «exp.right.get(idx).generateAwkExpression»«ENDFOR»)'''
	dispatch def String generateAwkExpression(Multiplication exp) '''
		«exp.left.generateAwkExpression»«FOR idx: (0..exp.operator.size-1)» «exp.operator.get(idx)» «exp.right.get(idx).generateAwkExpression»«ENDFOR»'''
	dispatch def generateAwkExpression(StringOption exp) '''"«exp.^val»"'''
	dispatch def generateAwkExpression(IntOption exp) '''«exp.^val»'''
	dispatch def generateAwkExpression(ColOption exp) '''$«exp.^val.columnIndex»'''
	dispatch def generateAwkExpression(VarReference exp) '''«exp.^val.generateAwkVarDeclaration»'''
	
}